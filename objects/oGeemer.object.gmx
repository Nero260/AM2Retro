<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGeemer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action_inherited();
makeActive();
setCollisionBounds(-1, -1, 1, 1);
myhealth = 10;
damage = 6;
hitsound = sndEHit1;
deathsound = sndEDeath1;
platyoffset = -14
frozenspr = sGeemerFrozen;
target = 0;
canattack = 1;
state = 1;
myangle = 0;
updangle = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updangle = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action_inherited();
enemy_active_check(20);
if (active == 1 &amp;&amp; frozen == 0) {
    if (state == 1) {
        if (collision_line(x, y, x, (y + 2), oSlope1, true, true) &gt; 0 || collision_line(x, y, x, (y + 2), oSlope2, true, true) &gt; 0) {
            if (facing == 1 &amp;&amp; (x - xprevious) &gt; 0.5)
                x -= 0.5;
            if (facing == -1 &amp;&amp; (x - xprevious) &lt; -0.5)
                x += 0.5;
            if (isCollisionBottom(1) == 0)
                y += 2;
        }
        if (collision_line((x - 1), (y - 2), (x + 1), (y - 2), oSlope3, true, true) &gt; 0 &amp;&amp; facing == -1 &amp;&amp; (x - xprevious) &gt; 0.5)
            x -= 0.5;
        if (collision_line((x - 1), (y - 2), (x + 1), (y - 2), oSlope4, true, true) &gt; 0 &amp;&amp; facing == 1 &amp;&amp; (x - xprevious) &lt; -0.5)
            x += 0.5;
        if isCollisionBottom(1) {
            platyoffset = -14;
            myangle = (0 + (180 * facing == -1))
            image_angle = 0;
            if (isCollisionLeft(1) == 0 &amp;&amp; isCollisionRight(1) == 0) {
                xVel = (0.5 * facing);
                yVel = 0;
            }
            if (isCollisionRight(1) == 1 &amp;&amp; facing == 1) {
                y -= 1
                myangle = 90;
            }
            if (isCollisionLeft(1) == 1 &amp;&amp; facing == -1) {
                y -= 1
                myangle = 90;
            }
        }
        if isCollisionRight(1) {
            platyoffset = -10;
            myangle = (90 + (180 * facing == -1))
            if (isCollisionTop(1) == 0 &amp;&amp; isCollisionBottom(1) == 0) {
                yVel = (-0.5 * facing);
                xVel = 0;
            }
            if (isCollisionTop(1) == 1 &amp;&amp; facing == 1) {
                x -= 1;
                myangle = 180;
            }
            if (isCollisionBottom(1) == 1 &amp;&amp; facing == -1) {
                x -= 1;
                myangle = 180;
            }
            if (instance_number(oQuake) &gt; 0) {
                x -= 8;
                myangle = 0;
                image_angle = 0;
            }
        }
        if isCollisionLeft(1) {
            platyoffset = -10;
            myangle = (270 - (180 * facing == -1))
            if (updangle == 0 &amp;&amp; facing == 1)
                image_angle = 345;
            if (isCollisionTop(1) == 0 &amp;&amp; isCollisionBottom(1) == 0) {
                yVel = (0.5 * facing);
                xVel = 0;
            }
            if (isCollisionTop(1) == 1 &amp;&amp; facing == -1) {
                x += 1;
                myangle = 0;
                if (isCollisionLeftSlope(1) == 0)
                    image_angle = -90;
            }
            if (isCollisionBottom(1) == 1 &amp;&amp; facing == 1) {
                x += 1;
                myangle = 0;
                if (isCollisionLeftSlope(1) == 0)
                    image_angle = -90;
            }
            if (instance_number(oQuake) &gt; 0) {
                x += 8;
                myangle = 0;
                image_angle = 0;
            }
        }
        if isCollisionTop(1) {
            platyoffset = 0;
            myangle = (180 - (180 * facing == -1))
            if (isCollisionLeft(1) == 0 &amp;&amp; isCollisionRight(1) == 0) {
                xVel = (-0.5 * facing);
                yVel = 0;
            }
            if (isCollisionRight(1) == 1 &amp;&amp; facing == -1) {
                y += 1;
                myangle = 270;
                if (isCollisionRightSlope(1) == 0)
                    image_angle = 180;
            }
            if (isCollisionLeft(1) == 1 &amp;&amp; facing == 1) {
                y += 1;
                myangle = 270;
            }
            if (instance_number(oQuake) &gt; 0) {
                y += 8;
                myangle = 0;
                image_angle = 0;
            }
        }
        if (isCollisionBottom(1) == 0 &amp;&amp; isCollisionTop(1) == 0 &amp;&amp; isCollisionLeft(1) == 0 &amp;&amp; isCollisionRight(1) == 0) {
            if collision_point((x - 2), (y + 2), oSolid, 1, 1) {
                if (facing == 1) {
                    y += 1;
                    if (updangle == 1)
                        image_angle = 360;
                    myangle = 270;
                }
                if (facing == -1) {
                    x -= 1;
                    image_angle = -90;
                    myangle = 180;
                }
            }
            if collision_point((x + 2), (y + 2), oSolid, 1, 1) {
                if (facing == 1) {
                    x += 1;
                    myangle = 0;
                }
                if (facing == -1) {
                    y += 1;
                    image_angle = 0;
                    if (updangle == 1)
                        myangle = 270;
                }
            }
            if collision_point((x - 2), (y - 2), oSolid, 1, 1) {
                if (facing == 1) {
                    x -= 1;
                    myangle = 180;
                }
                if (facing == -1) {
                    y -= 1;
                    if (updangle == 1)
                        image_angle = -180;
                    myangle = 90;
                }
                if (collision_line((x - 2), (y - 2), (x + 2), (y - 2), oSlope3, true, true) &gt; 0 || collision_line((x - 2), (y - 1), (x + 2), (y - 1), oSlope3, true, true) &gt; 0)
                    y -= 1;
            }
            if collision_point((x + 2), (y - 2), oSolid, 1, 1) {
                if (facing == 1) {
                    y -= 1;
                    myangle = 90;
                }
                if (facing == -1) {
                    x += 1;
                    if (updangle == 1)
                        image_angle = -270;
                    myangle = 0;
                }
                if (collision_line((x - 2), (y - 2), (x + 2), (y - 2), oSlope4, true, true) &gt; 0 || collision_line((x - 2), (y - 1), (x + 2), (y - 1), oSlope4, true, true) &gt; 0)
                    y -= 1;
            }
            yVel += 0.1;
        }
    }
    if (updangle == 1) {
        if (myangle &gt; (image_angle + (180 * facing == -1)))
            image_angle += 15;
        if (myangle &lt; (image_angle + (180 * facing == -1)))
            image_angle -= 15;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y + 2), oSlope1, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        image_angle = 45;
        myangle = 45;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y + 2), oSlope2, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        image_angle = -45;
        myangle = -45;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y - 2), oSlope3, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        if (facing == 1) {
            image_angle = 225;
            myangle = 225;
        }
        if (facing == -1)
            facing = 1;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y - 2), oSlope4, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        if (facing == 1) {
            image_angle = 135;
            myangle = 135;
        }
        if (facing == -1)
            facing = 1;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y + 2), oSlope1B, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        image_angle = 15;
        myangle = 15;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y + 2), oSlope2B, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 3;
        image_angle = -15;
        myangle = -15;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y - 2), oSlope3B, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        if (facing == 1) {
            image_angle = 195;
            myangle = 195;
        }
        if (facing == -1)
            facing = 1;
    }
    if (collision_rectangle((x - 1), y, (x + 1), (y - 2), oSlope4B, 1, 1) &gt; 0) {
        updangle = 0;
        alarm[0] = 2;
        if (facing == 1) {
            image_angle = 165;
            myangle = 165;
        }
        if (facing == -1)
            facing = 1;
    }
    if (stun == 0)
        moveTo(xVel, yVel)
    image_speed = 0.2;
}
if (state == 100) enemy_death();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
